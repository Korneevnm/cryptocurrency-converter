{"version":3,"sources":["containers/CurrencyConverter/reducers.js","containers/CurrencyConverter/constants.js","containers/CurrencyList/reducers.js","containers/CurrencyList/constants.js","reducers.js","utils/axiosConfig.js","containers/CurrencyList/saga.js","containers/CurrencyConverter/saga.js","sagas.js","components/Header/index.js","containers/CurrencyConverter/actions.js","containers/CurrencyConverter/selectors.js","components/CurrencyConverterSelect/index.js","containers/CurrencyConverter/index.js","containers/CurrencyList/selectors.js","containers/CurrencyList/index.js","containers/CurrencyList/actions.js","containers/App/index.js","serviceWorker.js","index.js","configureStore.js"],"names":["initialState","currencies","cryptoCurrencies","fromData","label","symbol","id","amount","toData","price","loading","error","currency","state","action","produce","draft","type","fiat","crypto","data","cryptocurrency","cryptocurrencyList","rootReducer","combineReducers","axiosConfig","axios","create","baseURL","apiKey2","getCryptocurrencyList","watcherCryptocurrencyList","call","get","put","takeLatest","getCurrencies","getCurrencyConvert","watcherCurrency","all","quote","rootSaga","Header","className","currencyLoad","selectCurrency","makeSelectCurrencyFromData","createSelector","makeSelectCurrencyToData","makeSelectCurrenciesList","makeSelectCryptoCurrenciesList","makeSelectCurrencyLoading","CurrencyConverterSelect","defaultValue","handleChange","inputValue","Option","Select","OptGroup","currenciesList","useSelector","cryptoCurrenciesList","currenciesLoading","currencyFromData","currencyToData","showSearch","optionFilterProp","value","filterOption","input","option","children","toString","toLowerCase","includes","onChange","size","map","name","sign","key","title","src","alt","width","CurrencyConverter","dispatch","useDispatch","useState","setValue","useEffect","parseFloat","toFixed","replace","min","icon","SwapOutlined","onClick","disabled","selectCryptocurrencyList","makeSelectCryptocurrencyList","makeSelectLoading","CurrencyList","Column","Table","counter","setCounter","cryptocurrencyListLoading","interval","setInterval","clearInterval","columnRank","dataIndex","align","sorter","a","b","cmc_rank","columnName","render","text","record","ellipsis","localeCompare","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","placeholder","e","target","onPressEnter","SearchOutlined","filterIcon","filtered","style","color","undefined","onFilter","columnPrice","USD","columnMarketCap","market_cap","columnVolume","volume_24h","columnChange","percent_change_24h","dataSource","rowKey","item","onRow","pagination","total","length","showTotal","range","showSizeChanger","showQuickJumper","App","Boolean","window","location","hostname","match","store","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","configureStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c01e5296.chunk.js","sourcesContent":["import produce from 'immer';\r\nimport {\r\n  FETCH_CURRENCIES_START,\r\n  FETCH_CURRENCIES_SUCCESS,\r\n  FETCH_CURRENCIES_FAILURE,\r\n  CURRENCY_CONVERT_START,\r\n  CURRENCY_CONVERT_SUCCESS,\r\n  CURRENCY_CONVERT_FAILURE\r\n} from './constants';\r\n\r\nconst initialState = {\r\n  currencies: [],\r\n  cryptoCurrencies: [],\r\n  fromData: { label: 'Bitcoin', symbol: 'BTC', id: 1, amount: 1 },\r\n  toData: {\r\n    label: 'United States Dollar',\r\n    symbol: 'USD',\r\n    id: 2781,\r\n    amount: 1,\r\n    price: 0\r\n  },\r\n  loading: true,\r\n  error: false\r\n};\r\n\r\nconst currency = (state = initialState, action) =>\r\n  produce(state, draft => {\r\n    switch (action.type) {\r\n      case FETCH_CURRENCIES_START:\r\n        draft.currencies = state.currencies;\r\n        draft.cryptoCurrencies = state.cryptoCurrencies;\r\n        draft.toData = state.toData;\r\n        draft.loading = true;\r\n        draft.error = false;\r\n        break;\r\n\r\n      case FETCH_CURRENCIES_SUCCESS:\r\n        draft.currencies = action.fiat;\r\n        draft.cryptoCurrencies = action.crypto;\r\n        draft.loading = false;\r\n        break;\r\n\r\n      case FETCH_CURRENCIES_FAILURE:\r\n        draft.currencies = [];\r\n        draft.cryptoCurrencies = [];\r\n        draft.loading = false;\r\n        draft.error = action.error;\r\n        break;\r\n\r\n      case CURRENCY_CONVERT_START:\r\n        draft.fromData = state.fromData;\r\n        draft.toData = state.toData;\r\n        draft.loading = true;\r\n        draft.error = false;\r\n        break;\r\n\r\n      case CURRENCY_CONVERT_SUCCESS:\r\n        draft.fromData = action.data.fromData;\r\n        draft.toData = action.data.toData;\r\n        draft.loading = false;\r\n        break;\r\n\r\n      case CURRENCY_CONVERT_FAILURE:\r\n        draft.fromData = {};\r\n        draft.toData = {};\r\n        draft.loading = false;\r\n        draft.error = action.error;\r\n        break;\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  });\r\n\r\nexport default currency;\r\n","export const FETCH_CURRENCIES_START = 'FETCH_CURRENCIES_START';\r\nexport const FETCH_CURRENCIES_SUCCESS = 'FETCH_CURRENCIES_SUCCESS';\r\nexport const FETCH_CURRENCIES_FAILURE = 'FETCH_CURRENCIES_FAILURE';\r\n\r\nexport const CURRENCY_CONVERT_START = 'CURRENCY_CONVERT_START';\r\nexport const CURRENCY_CONVERT_SUCCESS = 'CURRENCY_CONVERT_SUCCESS';\r\nexport const CURRENCY_CONVERT_FAILURE = 'CURRENCY_CONVERT_FAILURE';\r\n","import produce from 'immer';\r\nimport {\r\n  FETCH_CRYPTOCURRENCYLIST_START,\r\n  FETCH_CRYPTOCURRENCYLIST_SUCCESS,\r\n  FETCH_CRYPTOCURRENCYLIST_FAILURE\r\n} from './constants';\r\n\r\nconst initialState = {\r\n  cryptocurrency: [],\r\n  loading: true,\r\n  error: null\r\n};\r\n\r\nconst cryptocurrencyList = (state = initialState, action) =>\r\n  produce(state, draft => {\r\n    switch (action.type) {\r\n      case FETCH_CRYPTOCURRENCYLIST_START:\r\n        draft.cryptocurrency = [];\r\n        draft.loading = true;\r\n        draft.error = false;\r\n        break;\r\n\r\n      case FETCH_CRYPTOCURRENCYLIST_SUCCESS:\r\n        draft.cryptocurrency = action.data;\r\n        draft.loading = false;\r\n        break;\r\n\r\n      case FETCH_CRYPTOCURRENCYLIST_FAILURE:\r\n        draft.cryptocurrency = [];\r\n        draft.loading = false;\r\n        draft.error = action.error;\r\n        break;\r\n\r\n      default:\r\n        return draft.state;\r\n    }\r\n  });\r\n\r\nexport default cryptocurrencyList;\r\n","export const FETCH_CRYPTOCURRENCYLIST_START = 'FETCH_CRYPTOCURRENCYLIST_START';\r\nexport const FETCH_CRYPTOCURRENCYLIST_SUCCESS =\r\n  'FETCH_CRYPTOCURRENCYLIST_SUCCESS';\r\nexport const FETCH_CRYPTOCURRENCYLIST_FAILURE =\r\n  'FETCH_CRYPTOCURRENCYLIST_FAILURE';\r\n","import { combineReducers } from 'redux';\r\n\r\nimport currency from './containers/CurrencyConverter/reducers';\r\nimport cryptocurrencyList from './containers/CurrencyList/reducers';\r\n\r\nconst rootReducer = combineReducers({\r\n  currency: currency,\r\n  cryptocurrencyList: cryptocurrencyList\r\n});\r\n\r\nexport default rootReducer;\r\n","import axios from 'axios';\r\n\r\nconst cors = 'https://cors-anywhere.herokuapp.com/';\r\nconst url = 'https://pro-api.coinmarketcap.com/v1';\r\n\r\nconst axiosConfig = axios.create({\r\n  baseURL: `${cors}${url}`\r\n});\r\n\r\nexport const apiKey = '3db9eb8c-c320-4966-8516-1e84cd34b48e';\r\nexport const apiKey2 = '61e96c3a-4935-48aa-81ac-a23e665fc5a2';\r\nexport const apiKey3 = '482d902c-cc4c-4e2a-9f32-a4d2fa80e25a';\r\nexport default axiosConfig;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n  FETCH_CRYPTOCURRENCYLIST_START,\r\n  FETCH_CRYPTOCURRENCYLIST_SUCCESS,\r\n  FETCH_CRYPTOCURRENCYLIST_FAILURE\r\n} from './constants';\r\nimport axiosConfig, { apiKey } from '../../utils/axiosConfig';\r\n\r\nfunction* getCryptocurrencyList() {\r\n  try {\r\n    const {\r\n      data: { data }\r\n    } = yield call(() =>\r\n      axiosConfig.get(\r\n        `/cryptocurrency/listings/latest?CMC_PRO_API_KEY=${apiKey}&limit=2500`\r\n      )\r\n    );\r\n    yield put({ type: FETCH_CRYPTOCURRENCYLIST_SUCCESS, data });\r\n  } catch (error) {\r\n    yield put({ type: FETCH_CRYPTOCURRENCYLIST_FAILURE, error });\r\n  }\r\n}\r\n\r\nexport default function* watcherCryptocurrencyList() {\r\n  yield takeLatest(FETCH_CRYPTOCURRENCYLIST_START, getCryptocurrencyList);\r\n}\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n  FETCH_CURRENCIES_START,\r\n  FETCH_CURRENCIES_SUCCESS,\r\n  FETCH_CURRENCIES_FAILURE,\r\n  CURRENCY_CONVERT_START,\r\n  CURRENCY_CONVERT_SUCCESS,\r\n  CURRENCY_CONVERT_FAILURE\r\n} from './constants';\r\n\r\nimport axios from 'axios';\r\nimport axiosConfig, { apiKey2, apiKey3 } from '../../utils/axiosConfig';\r\n\r\nfunction* getCurrencies() {\r\n  try {\r\n    const [\r\n      {\r\n        data: { data: fiat }\r\n      },\r\n      {\r\n        data: { data: crypto }\r\n      }\r\n    ] = yield call(() =>\r\n      axios.all([\r\n        axiosConfig.get(`/fiat/map?CMC_PRO_API_KEY=${apiKey2}`),\r\n        axiosConfig.get(`/cryptocurrency/map?CMC_PRO_API_KEY=${apiKey2}`)\r\n      ])\r\n    );\r\n    yield put({ type: FETCH_CURRENCIES_SUCCESS, fiat, crypto });\r\n  } catch (error) {\r\n    yield put({ type: FETCH_CURRENCIES_FAILURE, error });\r\n  }\r\n}\r\n\r\nfunction* getCurrencyConvert({ fromData, toData }) {\r\n  try {\r\n    const {\r\n      data: { data }\r\n    } = yield call(() =>\r\n      axiosConfig.get(\r\n        `/tools/price-conversion?CMC_PRO_API_KEY=${apiKey3}&id=${fromData.id}&amount=${fromData.amount}&convert=${toData.symbol}`\r\n      )\r\n    );\r\n    const currency = {\r\n      fromData: {\r\n        label: fromData.label,\r\n        symbol: fromData.symbol,\r\n        id: fromData.id,\r\n        amount: fromData.amount\r\n      },\r\n      toData: {\r\n        label: toData.label,\r\n        symbol: toData.symbol,\r\n        id: toData.id,\r\n        amount: fromData.amount,\r\n        price: data.quote[toData.symbol].price\r\n      }\r\n    };\r\n    yield put({ type: CURRENCY_CONVERT_SUCCESS, data: currency });\r\n  } catch (error) {\r\n    yield put({ type: CURRENCY_CONVERT_FAILURE, error });\r\n  }\r\n}\r\n\r\nexport default function* watcherCurrency() {\r\n  yield takeLatest(FETCH_CURRENCIES_START, getCurrencies);\r\n  yield takeLatest(CURRENCY_CONVERT_START, getCurrencyConvert);\r\n}\r\n","import { all, call } from 'redux-saga/effects';\r\nimport watcherCryptocurrencyList from './containers/CurrencyList/saga';\r\nimport watcherCurrency from './containers/CurrencyConverter/saga';\r\n\r\nfunction* rootSaga() {\r\n  yield all([call(watcherCurrency), call(watcherCryptocurrencyList)]);\r\n}\r\n\r\nexport default rootSaga;\r\n","import React from 'react';\r\nimport './style.sass';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className='header'>\r\n      <h1>Cryptocurrency converter</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import {\r\n  FETCH_CURRENCIES_START,\r\n  FETCH_CURRENCIES_SUCCESS,\r\n  FETCH_CURRENCIES_FAILURE,\r\n  CURRENCY_CONVERT_START,\r\n  CURRENCY_CONVERT_SUCCESS,\r\n  CURRENCY_CONVERT_FAILURE\r\n} from './constants';\r\n\r\nconst currenciesLoad = () => ({\r\n  type: FETCH_CURRENCIES_START\r\n});\r\n\r\nconst currenciesLoaded = (currencies, cryptoCurrencies) => ({\r\n  type: FETCH_CURRENCIES_SUCCESS,\r\n  currencies,\r\n  cryptoCurrencies\r\n});\r\n\r\nconst currenciesError = error => ({\r\n  type: FETCH_CURRENCIES_FAILURE,\r\n  error\r\n});\r\n\r\nconst currencyLoad = (fromData, toData) => ({\r\n  type: CURRENCY_CONVERT_START,\r\n  fromData: fromData,\r\n  toData: toData\r\n});\r\n\r\nconst currencyLoaded = toData => ({\r\n  type: CURRENCY_CONVERT_SUCCESS,\r\n  toData\r\n});\r\n\r\nconst currencyError = error => ({\r\n  type: CURRENCY_CONVERT_FAILURE,\r\n  error\r\n});\r\n\r\nexport {\r\n  currenciesLoad,\r\n  currenciesLoaded,\r\n  currenciesError,\r\n  currencyLoad,\r\n  currencyLoaded,\r\n  currencyError\r\n};\r\n","import { createSelector } from 'reselect';\r\n\r\nconst selectCurrency = state => state.currency;\r\n\r\nexport const makeSelectCurrencyFromData = createSelector(\r\n  selectCurrency,\r\n  currency => currency.fromData\r\n);\r\n\r\nexport const makeSelectCurrencyToData = createSelector(\r\n  selectCurrency,\r\n  currency => currency.toData\r\n);\r\n\r\nexport const makeSelectCurrenciesList = createSelector(\r\n  selectCurrency,\r\n  currency => currency.currencies\r\n);\r\n\r\nexport const makeSelectCryptoCurrenciesList = createSelector(\r\n  selectCurrency,\r\n  currency => currency.cryptoCurrencies\r\n);\r\n\r\nexport const makeSelectCurrencyLoading = createSelector(\r\n  selectCurrency,\r\n  currency => currency.loading\r\n);\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Select } from 'antd';\r\nimport {\r\n  makeSelectCurrenciesList,\r\n  makeSelectCryptoCurrenciesList,\r\n  makeSelectCurrencyLoading,\r\n  makeSelectCurrencyFromData,\r\n  makeSelectCurrencyToData\r\n} from '../../containers/CurrencyConverter/selectors';\r\n\r\nconst CurrencyConverterSelect = ({\r\n  defaultValue,\r\n  type,\r\n  handleChange,\r\n  inputValue\r\n}) => {\r\n  const { Option, OptGroup } = Select;\r\n  const currenciesList = useSelector(makeSelectCurrenciesList);\r\n  const cryptoCurrenciesList = useSelector(makeSelectCryptoCurrenciesList);\r\n  const currenciesLoading = useSelector(makeSelectCurrencyLoading);\r\n  const currencyFromData = useSelector(makeSelectCurrencyFromData);\r\n  const currencyToData = useSelector(makeSelectCurrencyToData);\r\n\r\n  return (\r\n    <>\r\n      <Select\r\n        showSearch\r\n        optionFilterProp='children'\r\n        loading={currenciesLoading}\r\n        value={defaultValue}\r\n        filterOption={(input, option) => {\r\n          if (option.children) {\r\n            return option.children\r\n              .toString()\r\n              .toLowerCase()\r\n              .includes(input.toLowerCase());\r\n          }\r\n        }}\r\n        onChange={(value, { id, symbol }) => {\r\n          let fromData = {\r\n            label: currencyFromData.label,\r\n            symbol: currencyFromData.symbol,\r\n            id: currencyFromData.id,\r\n            amount: inputValue\r\n          };\r\n          let toData = {\r\n            label: currencyToData.label,\r\n            symbol: currencyToData.symbol,\r\n            id: currencyToData.id,\r\n            amount: inputValue\r\n          };\r\n          if (type === 'fromSelect') {\r\n            fromData = {\r\n              label: value,\r\n              symbol: currencyFromData.symbol,\r\n              id: id,\r\n              amount: inputValue\r\n            };\r\n            handleChange(fromData, toData);\r\n          } else {\r\n            let toData = {\r\n              label: value,\r\n              symbol: symbol,\r\n              id: currencyToData.id,\r\n              amount: inputValue\r\n            };\r\n            handleChange(fromData, toData);\r\n          }\r\n        }}\r\n        size='large'>\r\n        <OptGroup label='Fiat Currencies'>\r\n          {currenciesList.map(({ id, name, sign, symbol }) => (\r\n            <Option\r\n              key={id}\r\n              id={id}\r\n              value={name}\r\n              title={name}\r\n              symbol={symbol}\r\n              className='converter_option'>\r\n              {sign} {name} ({symbol})\r\n            </Option>\r\n          ))}\r\n        </OptGroup>\r\n        <OptGroup label='Cryptocurrencies'>\r\n          {cryptoCurrenciesList.map(({ id, name, symbol }) => (\r\n            <Option\r\n              key={id}\r\n              id={id}\r\n              value={name}\r\n              title={name}\r\n              symbol={symbol}\r\n              className='converter_option'>\r\n              <img\r\n                src={`https://s2.coinmarketcap.com/static/img/coins/64x64/${id}.png`}\r\n                alt={name}\r\n                width='20px'\r\n              />\r\n              {name} ({symbol})\r\n            </Option>\r\n          ))}\r\n        </OptGroup>\r\n      </Select>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CurrencyConverterSelect;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Input, InputNumber, Button } from 'antd';\r\nimport { SwapOutlined } from '@ant-design/icons';\r\nimport { currenciesLoad, currencyLoad } from './actions';\r\nimport {\r\n  makeSelectCurrencyFromData,\r\n  makeSelectCurrencyToData\r\n} from './selectors';\r\nimport CurrencyConverterSelect from '../../components/CurrencyConverterSelect';\r\nimport './style.sass';\r\n\r\nconst CurrencyConverter = () => {\r\n  const dispatch = useDispatch();\r\n  const [value, setValue] = useState(1);\r\n\r\n  const currencyFromData = useSelector(makeSelectCurrencyFromData);\r\n  const currencyToData = useSelector(makeSelectCurrencyToData);\r\n  const fromData = {\r\n    label: currencyFromData.label,\r\n    symbol: currencyFromData.symbol,\r\n    id: currencyFromData.id,\r\n    amount: value\r\n  };\r\n  const toData = {\r\n    label: currencyToData.label,\r\n    symbol: currencyToData.symbol,\r\n    id: currencyToData.id,\r\n    amount: value\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(currenciesLoad());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (value > 0) {\r\n      dispatch(currencyLoad(fromData, toData));\r\n    }\r\n  }, [dispatch, value]);\r\n\r\n  const handleChange = (fromData, toData) => {\r\n    dispatch(currencyLoad(fromData, toData));\r\n  };\r\n\r\n  const handleClick = () => {\r\n    dispatch(currencyLoad(currencyToData, currencyFromData));\r\n  };\r\n\r\n  const price =\r\n    currencyToData.price && currencyToData.price > 0.01\r\n      ? parseFloat(currencyToData.price)\r\n          .toFixed(2)\r\n          .replace(/(?=\\B(?:\\d{3})+(?!\\d))/g, ' ')\r\n      : parseFloat(currencyToData.price)\r\n          .toFixed(6)\r\n          .replace(/(?=\\B(?:\\d{3})+(?!\\d))/g, ' ');\r\n\r\n  return (\r\n    <div className='converter'>\r\n      <div className='converter__item'>\r\n        <CurrencyConverterSelect\r\n          defaultValue={fromData.label}\r\n          type='fromSelect'\r\n          handleChange={handleChange}\r\n          inputValue={value}\r\n        />\r\n        <InputNumber\r\n          size='large'\r\n          min={0}\r\n          defaultValue={value}\r\n          onChange={value => setValue(value)}\r\n        />\r\n      </div>\r\n\r\n      <Button\r\n        type='primary'\r\n        icon={<SwapOutlined />}\r\n        size='large'\r\n        onClick={handleClick}\r\n      />\r\n\r\n      <div className='converter__item'>\r\n        <CurrencyConverterSelect\r\n          defaultValue={toData.label}\r\n          type='toSelect'\r\n          handleChange={handleChange}\r\n          inputValue={value}\r\n        />\r\n        <Input size='large' value={value > 0 ? price : 0} disabled />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrencyConverter;\r\n","import { createSelector } from 'reselect';\r\n\r\nconst selectCryptocurrencyList = state => state.cryptocurrencyList;\r\n\r\nexport const makeSelectCryptocurrencyList = createSelector(\r\n  selectCryptocurrencyList,\r\n  cryptocurrencyList => cryptocurrencyList.cryptocurrency\r\n);\r\n\r\nexport const makeSelectLoading = createSelector(\r\n  selectCryptocurrencyList,\r\n  cryptocurrencyList => cryptocurrencyList.loading\r\n);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Table, Input, Button } from 'antd';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { cryptocurrencyListLoad } from './actions';\r\nimport { currencyLoad } from '../CurrencyConverter/actions';\r\nimport { makeSelectCryptocurrencyList, makeSelectLoading } from './selectors';\r\nimport {\r\n  makeSelectCurrencyFromData,\r\n  makeSelectCurrencyToData\r\n} from '../CurrencyConverter/selectors';\r\nimport './style.sass';\r\n\r\nconst CurrencyList = () => {\r\n  const { Column } = Table;\r\n  const dispatch = useDispatch();\r\n  const [counter, setCounter] = useState(0);\r\n\r\n  const cryptocurrencyList = useSelector(makeSelectCryptocurrencyList);\r\n  const cryptocurrencyListLoading = useSelector(makeSelectLoading);\r\n\r\n  const currencyFromData = useSelector(makeSelectCurrencyFromData);\r\n  const currencyToData = useSelector(makeSelectCurrencyToData);\r\n\r\n  useEffect(() => {\r\n    dispatch(cryptocurrencyListLoad());\r\n\r\n    const interval = setInterval(() => {\r\n      setCounter(counter => counter + 1);\r\n    }, 15000);\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [dispatch, counter]);\r\n\r\n  const columnRank = (\r\n    <Column\r\n      title='Rank'\r\n      dataIndex='cmc_rank'\r\n      key='cmc_rank'\r\n      align='center'\r\n      width='90px'\r\n      sorter={(a, b) => a.cmc_rank - b.cmc_rank}\r\n    />\r\n  );\r\n\r\n  const columnName = (\r\n    <Column\r\n      title='Name'\r\n      dataIndex='name'\r\n      key='name'\r\n      width='30%'\r\n      render={(text, record) => (\r\n        <div className='cell_name'>\r\n          <img\r\n            src={`https://s2.coinmarketcap.com/static/img/coins/64x64/${record.id}.png`}\r\n            alt={record.name}\r\n            width='30px'\r\n          />\r\n          <span>\r\n            {record.name} ({record.symbol})\r\n          </span>\r\n        </div>\r\n      )}\r\n      ellipsis={true}\r\n      sorter={(a, b) => a.name.localeCompare(b.name)}\r\n      filterDropdown={({\r\n        setSelectedKeys,\r\n        selectedKeys,\r\n        confirm,\r\n        clearFilters\r\n      }) => (\r\n        <div className='search'>\r\n          <Input\r\n            placeholder={`Search name`}\r\n            value={selectedKeys[0]}\r\n            onChange={e =>\r\n              setSelectedKeys(e.target.value ? [e.target.value] : [])\r\n            }\r\n            onPressEnter={() => confirm()}\r\n          />\r\n          <Button\r\n            type='primary'\r\n            onClick={() => confirm()}\r\n            icon={<SearchOutlined />}\r\n            size='small'>\r\n            Search\r\n          </Button>\r\n          <Button onClick={() => clearFilters()} size='small'>\r\n            Reset\r\n          </Button>\r\n        </div>\r\n      )}\r\n      filterIcon={filtered => (\r\n        <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />\r\n      )}\r\n      onFilter={(value, record) => {\r\n        return record.name.toLowerCase().includes(value.toLowerCase());\r\n      }}\r\n    />\r\n  );\r\n\r\n  const columnPrice = (\r\n    <Column\r\n      title='Price'\r\n      dataIndex='price'\r\n      key='price'\r\n      sorter={(a, b) => a.quote.USD.price - b.quote.USD.price}\r\n      render={(text, record) => {\r\n        if (record.quote.USD.price === null) {\r\n          return 'unknown';\r\n        }\r\n        if (record.quote.USD.price > 1) {\r\n          return `$${record.quote.USD.price\r\n            .toFixed(2)\r\n            .replace(/(?=\\B(?:\\d{3})+(?!\\d))/g, ' ')}`;\r\n        }\r\n        if (record.quote.USD.price < 0.00001) {\r\n          return `$${record.quote.USD.price}`;\r\n        } else {\r\n          return `$${parseFloat(record.quote.USD.price).toFixed(6)}`;\r\n        }\r\n      }}\r\n    />\r\n  );\r\n\r\n  const columnMarketCap = (\r\n    <Column\r\n      title='Market Cap'\r\n      dataIndex='market_cap'\r\n      key='market_cap'\r\n      sorter={(a, b) => a.quote.USD.market_cap - b.quote.USD.market_cap}\r\n      render={(text, record) => {\r\n        if (record.quote.USD.market_cap === null) {\r\n          return 'unknown';\r\n        }\r\n        if (record.quote.USD.market_cap > 1) {\r\n          return `$${record.quote.USD.market_cap\r\n            .toFixed(2)\r\n            .replace(/(?=\\B(?:\\d{3})+(?!\\d))/g, ' ')}`;\r\n        }\r\n        if (record.quote.USD.market_cap < 0.00001) {\r\n          return `$${record.quote.USD.market_cap}`;\r\n        } else {\r\n          return `$${parseFloat(record.quote.USD.market_cap).toFixed(6)}`;\r\n        }\r\n      }}\r\n    />\r\n  );\r\n\r\n  const columnVolume = (\r\n    <Column\r\n      title='Volume (24h)'\r\n      dataIndex='volume_24h'\r\n      key='volume_24h'\r\n      sorter={(a, b) => a.quote.USD.volume_24h - b.quote.USD.volume_24h}\r\n      render={(text, record) => {\r\n        if (record.quote.USD.volume_24h === null) {\r\n          return '$0';\r\n        }\r\n        if (record.quote.USD.volume_24h > 1) {\r\n          return `$${record.quote.USD.volume_24h\r\n            .toFixed(0)\r\n            .replace(/(?=\\B(?:\\d{3})+(?!\\d))/g, ' ')}`;\r\n        } else {\r\n          return `$${record.quote.USD.volume_24h}`;\r\n        }\r\n      }}\r\n    />\r\n  );\r\n\r\n  const columnChange = (\r\n    <Column\r\n      title='Change (24h)'\r\n      dataIndex='percent_change_24h'\r\n      key='percent_change_24h'\r\n      align='center'\r\n      sorter={(a, b) =>\r\n        a.quote.USD.percent_change_24h - b.quote.USD.percent_change_24h\r\n      }\r\n      render={(text, record) => {\r\n        if (record.quote.USD.percent_change_24h < 0) {\r\n          return (\r\n            <span className='minus'>\r\n              {parseFloat(record.quote.USD.percent_change_24h).toFixed(3)}%\r\n            </span>\r\n          );\r\n        } else if (record.quote.USD.percent_change_24h > 0) {\r\n          return (\r\n            <span className='plus'>\r\n              {record.quote.USD.percent_change_24h.toFixed(3)}%\r\n            </span>\r\n          );\r\n        } else if (record.quote.USD.percent_change_24h === null) {\r\n          return `0.000%`;\r\n        } else {\r\n          return `${parseFloat(record.quote.USD.percent_change_24h).toFixed(\r\n            3\r\n          )}%`;\r\n        }\r\n      }}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Table\r\n        dataSource={cryptocurrencyList}\r\n        rowKey={item => item.id}\r\n        onRow={item => {\r\n          return {\r\n            onClick: () => {\r\n              const fromData = {\r\n                label: item.name,\r\n                symbol: item.symbol,\r\n                id: item.id,\r\n                amount: currencyFromData.amount\r\n              };\r\n              dispatch(currencyLoad(fromData, currencyToData));\r\n            }\r\n          };\r\n        }}\r\n        loading={cryptocurrencyListLoading}\r\n        pagination={{\r\n          total: cryptocurrencyList.length,\r\n          showTotal: (total, range) =>\r\n            `${range[0]}-${range[1]} of ${total} coins`,\r\n          showSizeChanger: true,\r\n          showQuickJumper: true\r\n        }}\r\n        className='currency_table'>\r\n        {columnRank}\r\n        {columnName}\r\n        {columnPrice}\r\n        {columnMarketCap}\r\n        {columnVolume}\r\n        {columnChange}\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CurrencyList;\r\n","import {\r\n  FETCH_CRYPTOCURRENCYLIST_START,\r\n  FETCH_CRYPTOCURRENCYLIST_SUCCESS,\r\n  FETCH_CRYPTOCURRENCYLIST_FAILURE\r\n} from './constants';\r\n\r\nconst cryptocurrencyListLoad = () => ({\r\n  type: FETCH_CRYPTOCURRENCYLIST_START\r\n});\r\n\r\nconst cryptocurrencyListLoaded = cryptocurrency => ({\r\n  type: FETCH_CRYPTOCURRENCYLIST_SUCCESS,\r\n  cryptocurrency\r\n});\r\n\r\nconst cryptocurrencyListError = error => ({\r\n  type: FETCH_CRYPTOCURRENCYLIST_FAILURE,\r\n  error\r\n});\r\n\r\nexport {\r\n  cryptocurrencyListLoad,\r\n  cryptocurrencyListLoaded,\r\n  cryptocurrencyListError\r\n};\r\n","import React from 'react';\r\nimport Header from '../../components/Header';\r\nimport CurrencyConverter from '../CurrencyConverter';\r\nimport CurrencyList from '../CurrencyList';\r\nimport './style.sass';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='container'>\r\n      <Header />\r\n      <CurrencyConverter />\r\n      <CurrencyList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './configureStore';\nimport App from './containers/App';\nimport 'antd/dist/antd.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst initialState = {};\nconst store = configureStore(initialState);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootReducer from './reducers';\r\nimport rootSaga from './sagas';\r\n\r\nexport default function configureStore(initialState = {}) {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    applyMiddleware(sagaMiddleware)\r\n  );\r\n\r\n  sagaMiddleware.run(rootSaga);\r\n\r\n  return store;\r\n}\r\n"],"sourceRoot":""}